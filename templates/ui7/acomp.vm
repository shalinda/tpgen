import { Component, OnInit, Input} from '@angular/core';
import { ${className} } from '../../model/${lowerName}';
import { Router } from '@angular/router';
import { ${className}Service }  from '../../service/${lowerName}.service';
import { FormGroup, FormControl, Validators } from '@angular/forms';
import { types } from 'util';
#foreach ($col in $fkcols)
import { ${col.fkMethodName} } from '../../model/${col.fkLowerName}';
#end

#foreach ($col in $fkcols)
import { ${col.fkMethodName}Service }  from '../../service/${col.fkLowerName}.service';
#end

@Component({
  templateUrl: '${lowerName}s.component.html',
  selector: 'app-${lowerName}s',
  styleUrls: ['${lowerName}s.component.scss']
})

export class ${className}sComponent implements OnInit {
  _${objectName}Form: FormGroup;
  _editMode = false;
  _addMode = false;
  notifications = {
    header: '',
    details: '',
    cartons: ''
  };
  _alertType = '';

#foreach ($col in $fkcols)
  _${col.varName}s: ${col.fkMethodName}[] = [];
#end

  ${objectName}s: ${className}[] = [];
  _selected${className}: ${className};

  // pagination
  _usersCount = 0;
  _pages = 0;
  _currentPage = 0;

  constructor(private ${objectName}Service: ${className}Service
#foreach ($col in $fkcols)
    ,private ${col.varName}Service: ${col.fkMethodName}Service
#end
) { }

  ngOnInit() {
#foreach ($col in $fkcols)
    this.get${col.methodName}s();
#end
    this.get${className}s();
    this._selected${className} = this.${objectName}Service.getDummy${className}();
    this.initForm();
  }

  initForm(): void {
    this._${objectName}Form = new FormGroup({
#foreach ($col in $cols)
#if($col.fk)
    ${col.varName}: new FormControl(this._selected${className}.${col.varName}._id, [Validators.required]),
#else
    ${col.varName}: new FormControl(this._selected${className}.${col.varName}, [Validators.required]),
#end
#end
    });
  }

#foreach ($col in $fkcols)
  get${col.methodName}s(): void {
    this.${col.varName}Service.get${col.fkMethodName}s(null, null)
      .subscribe((res: any) => {
        this._${col.varName}s = res.${col.fkVarName}s;
      }, err => {
        console.log(err);
      });
  }
#end

  refresh(): void {
    this.get${className}s();
  }

  // TODO: Need to refactor this method
  select${className}(${objectName}: ${className}): void {
    if (this._selected${className}) {
      if (this._selected${className}._id === ${objectName}._id) {
        this.clear();
        this._editMode = false;
        return;
      } else {
        this._editMode = true;
      }
    }
    this._selected${className} = ${objectName};
    this.initForm();
  }

  compareRole(val1, val2) {
    return val1 === val2;
  }

  save(): void {
    console.log(this._${objectName}Form.value);
    const isUserValid = this.validateUser();
    if (isUserValid) {
      console.log('${className} valid');
      const data = JSON.parse(localStorage.getItem('user_data'));
      const obj = { ...this._${objectName}Form.value, company: data.facNo.toString()};
      
      this.${objectName}Service.add${className}(obj)
        .subscribe((res) => {
          this.clear();
          // this.${objectName}s = [...this.${objectName}s, res];
          this.get${className}s(this._currentPage);
          console.log('${className} Saved: ', res);
          this.msgAlert('header', 'Saved successfully', 'success');
        }, err => {          
          console.log('Error Saving ${className}');
          this.msgAlert('header', 'Error saving', 'danger');
        });
    }
  }

  update1(): void {
    const isUserValid = this.validateUser();
    if (isUserValid) {
      const obj = { ...this._${objectName}Form.value, _id: this._selected${className}._id};
      console.log('Updating ${className}..', obj);
      this.${objectName}Service.update${className}(obj)
        .subscribe(updatedEmp => {
          console.log('${className} Updated Successfully', updatedEmp);
          this.update${className}Array(updatedEmp);
          this.msgAlert('header', 'Saved successfully', 'success');
        }, err => {
          console.log('Error Updating ${className}');
          this.msgAlert('header', 'Error saving', 'danger');
        });
    }
  }

  delete(): void {
    const ${objectName} = this._selected${className};
    this.${objectName}Service.delete${className}(${objectName})
      .subscribe(deletedEmp => {
        console.log('${className} deleted');
        this.remove${className}FromArray();
        this.clear();
        this.msgAlert('header', 'Deleted successfully', 'success');
      }, err => {
        console.log('Error Deleting ${className}');
        this.msgAlert('header', 'Error deleting', 'danger');
      });
  }

  private update${className}Array(${objectName}: ${className}): void {
    this.${objectName}s = this.${objectName}s
      .map(obj => (obj._id === ${objectName}._id) ? ${objectName} : obj);
  }

  private remove${className}FromArray(): void {
    const ${objectName} = this._selected${className};
    this.${objectName}s = this.${objectName}s
      .filter(obj => obj._id !== ${objectName}._id);
  }

  private validateUser(): boolean {
    const formDataValid = this._${objectName}Form.valid;
    if (!formDataValid) {
      Object.keys(this._${objectName}Form.controls)
        .forEach(field => {
          const control = this._${objectName}Form.get(field);
          control.markAsDirty({ onlySelf: true });
        });
    }
    return formDataValid;
  }

  get${className}s(pageNum = 1, limit = 2): void {
    this.${objectName}Service.get${className}s(pageNum, limit)
      .subscribe(res => {
        if (res && res.${objectName}s) {
          this.${objectName}s = res.${objectName}s;
          try {
            this._usersCount = res.count;
            this._currentPage = parseInt(res.page.toString(), 10);
            this._pages = res.pages;
          } catch (ex) {
            console.log('Error Parsing pagination data');
          }
          console.log(res);
        }
      });
  }

  clear(): void {
    this._selected${className} = this.${objectName}Service.getDummy${className}();
    this.initForm();
  }

  showParent() {
    // this.employee = new ${className};
    this.get${className}s();
  }

  // pagination
  nextPage(): void {
    if ((this._currentPage + 1) <= this._pages) {
      this._currentPage += 1;
      this.get${className}s(this._currentPage);
    }
    console.log('next page', { currentPage: this._currentPage });
  }

  getPage(pageNum?: number): void {
    this._currentPage = pageNum;
    this.get${className}s(this._currentPage);
    console.log('Page Selected: ', pageNum);
  }

  prevPage(): void {
    if ((this._currentPage - 1) <= this._pages) {
      this._currentPage -= 1;
      this.get${className}s(this._currentPage);
    }
    console.log('pre page', { currentPage: this._currentPage });
  }

  getPagesAsArray() {
    if (this._pages > 0) {
      var arr = Array(this._pages).fill(1).map((x, y) => x + y);
      var pos = Math.floor(((this._pages)-1) / 10)
      return arr.slice(pos * 10, (pos + 1) * 10);

      //return this.utilService.getPagesArray(this._pages[i], this._currentPage[i]);
    }
    return [];
  }

  toggleHeader(): void {
    this._addMode = !this._addMode;
  }

  msgAlert(section, msg, type) {
    this.notifications[section] = msg;
    this._alertType = type;
    setTimeout(() => {
      this.notifications[section] = '';
      this._alertType = '';
    }, 4000);
  }
}
