/**
 * @author : Shalinda Ranasinghe
 * @copyright: 2020
 */

 const ${className} = require("../models/${lowerName}");

/**
 * @desc - module for get all ${objectName}.
 */
module.exports.get${className}s = (req, res) => {
  const itemPerPage = 50
  const page = req.query.page || 1
  const data = JSON.parse(req.headers.data);
  const query = ${className}.find({"company": data.facNo});
  
  query
#foreach ($col in $fkcols)
    .populate("$col.varName")
#end
    .lean()
    .skip((itemPerPage * page) - itemPerPage)
    .limit(itemPerPage)
    .exec()
    .then(${objectName}s => {
      query.count()
        .exec()
        .then(count => res.status(200)
          .json({
            ${objectName}s,
            count,
            page,
            pages: (count > 0) ? Math.ceil(count / itemPerPage) : 0 // TODO: handle math errors
          }))
        .catch(err => res.status(500)
          .json({ message: err.message }))
    })    

}

/**
 * @desc - module for get single ${objectName} by _id.
 */
module.exports.get${className}ById = (req, res) => {
  const _id = req.params.${objectName}Id;
  
  if (!_Id)
    return res.status(400)
      .json({ error: true, message: "${className} Id Required" })

  ${className}.findById(_id)
#foreach ($col in $fkcols)
    .populate("$col.varName")
#end  
    .lean()
    .exec()
    .then(${objectName} => res.status(200)
      .json(${objectName}))
    .catch(err => res.status(500)
      .json({ error: true, message: err.message }))
}

module.exports.get${className}ByParentId = (req, res) => {
  const itemPerPage = 50
  const page = req.query.page || 1
  const data = JSON.parse(req.headers.data);
  const parentId = req.params.parentId;
  const query = ${className}.find({"parentId": parentId});
  
  query
    .populate("parentId")
    .lean()
    .skip((itemPerPage * page) - itemPerPage)
    .limit(itemPerPage)
    .exec()
    .then(${objectName}s => {
      query.count()
        .exec()
        .then(count => res.status(200)
          .json({
            ${objectName}s,
            count,
            page,
            pages: (count > 0) ? Math.ceil(count / itemPerPage) : 0 // TODO: handle math errors
          }))
        .catch(err => res.status(500)
          .json({ message: err.message }))
    })    

}

/**
 * @desc - module for save ${objectName}
 */
module.exports.create = (req, res) => {
  const ${objectName} = new ${className}(req.body);

  ${objectName}.save((err, ${objectName}) => {
    if (err)
      return res.status(500)
        .json({ error: true, message: err.message })

    return res.status(201)
      .json(${objectName})
  })
}

/**
 * @desc - module for save ${objectName}
 */
module.exports.update1 = (req, res) => {
  const ${objectName} = req.body;
  const _id = ${objectName}._id;

  const query = { _id },
    update = { $set: ${objectName} },
    options = { new: true };

  ${className}.findByIdAndUpdate(query, update, options)
#foreach ($col in $fkcols)
    .populate("$col.varName")
#end  
    .lean()
    .exec()
    .then(${objectName} => res.status(200)
      .json(${objectName}))
    .catch(err => res.status(500)
      .json({ error: true, message: err.message }))
}

/**
 * @desc - module for delete ${objectName}
 */
module.exports.delete = (req, res) => {
  const _id = req.params.${objectName}Id;

  ${className}.findByIdAndRemove(_id)
    .lean()
    .exec()
    .then(${objectName} => res.status(200)
      .json(${objectName}))
    .catch(err => res.status(500)
      .json({ error: true, message: err.message }))
}



